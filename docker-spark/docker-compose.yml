version: '2'

networks:
  airflow_network:
    name: airflow_network
    external: true
    
services:

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - airflow_network
  
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - airflow_network
  
  
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
      - ./data:/data
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop.env
    ports:
      - 9000:9000
    networks:
      - airflow_network

  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    depends_on: 
      - namenode
    environment:
      SERVICE_PRECONDITION: "namenode:9000"
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    ports:
      - "9864:9864"
    env_file:
      - ./hadoop.env
    networks:
      - airflow_network

  spark-master:
    image: bde2020/spark-master:3.3.0-hadoop3.3
    container_name: spark-master
    depends_on:
      - namenode
      - datanode
    ports:
      - 8090:8090
      - 7077:7077
    environment: 
      - PYSPARK_PYTHON=python3
      - INIT_DAEMON_STEP=setup_spark
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    volumes: 
      - ../internal/data:/data:rw
      - ./spark-warehouse:/spark-warehouse
      - ./resources:/usr/local/spark/resources #Resources folder (Must be the same path in airflow and Spark Cluster)
    networks:
      - airflow_network
      
  spark-worker1:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark-worker1
    depends_on:
      - spark-master
    environment:
      - SPARK_MASTER = spark://spark-master:7077
      - CORE_CONF_fs_defaultFS = hdfs://namenode:9000
      - SPARK_WORKER_MEMORY = 8g
      - SPARK_WORKER_CORES = 4
    ports:
      - 8081:8081
    volumes: 
      - ../internal/data:/data:rw
      - ./spark-warehouse:/spark-warehouse
      - ./resources:/usr/local/spark/resources #Resources folder (Must be the same path in airflow and Spark Cluster)
    networks:
      - airflow_network
  
  spark-worker2:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark-worker2
    depends_on:
      - spark-master
    environment:
      - SPARK_MASTER = spark://spark-master:7077
      - CORE_CONF_fs_defaultFS = hdfs://namenode:9000
      - SPARK_WORKER_MEMORY = 8g
      - SPARK_WORKER_CORES = 4
    ports:
      - 8082:8082
    volumes: 
      - ../internal/data:/data:rw
      - ./spark-warehouse:/spark-warehouse
      - ./resources:/usr/local/spark/resources #Resources folder (Must be the same path in airflow and Spark Cluster)
    networks:
      - airflow_network

  
  hive-server:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-server
    depends_on:
      - spark-master
    env_file:
      - ./hadoop.env
    environment:
      HIVE_CORE_CONF_javax_jdo_option_ConnectionURL: "jdbc:postgresql://hive-metastore/metastore"
      SERVICE_PRECONDITION: "hive-metastore:9083"
    ports:
      - "10000:10000"
    networks:
      - airflow_network
  
  hive-metastore:
    image: bde2020/hive:2.3.2-postgresql-metastore
    container_name: hive-metastore
    env_file:
      - ./hadoop.env
    command: /opt/hive/bin/hive --service metastore
    environment:
      SERVICE_PRECONDITION: "namenode:9000 datanode:9864 hive-metastore-postgresql:5432"
    ports:
      - "9083:9083"
    networks:
      - airflow_network
  
  hive-metastore-postgresql:
    image: bde2020/hive-metastore-postgresql:2.3.0
    container_name: hive-metastore-postgresql
    networks:
      - airflow_network

  jupyter:
    build: ./jupyter
    volumes:
      - ./jupyter/work:/home/jovyan/work
    ports:
      - 8888:8888
    container_name: jupyter
    environment:
      JUPYTER_ENABLE_LAB: "yes"
    command: "start-notebook.sh --NotebookApp.token="
    networks:
      - airflow_network

  # cloudera:
  #   image: gethue/hue:20201111-135001
  #   container_name: hue
  #   dns: 8.8.8.8
  #   ports:
  #     - "8888:8888"
  #   volumes:
  #     - ./conf.dist:/usr/share/hue/desktop/conf
  #   depends_on: 
  #     - hive-server

  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 datanode:9864"
    env_file:
      - ./hadoop.env
    networks:
      - airflow_network

  nodemanager1:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 datanode:9864 resourcemanager:8088"
    env_file:
      - ./hadoop.env
    networks:
      - airflow_network

  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    container_name: historyserver
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode:9864 resourcemanager:8088"
    volumes:
      - hadoop_historyserver:/hadoop/yarn/timeline
    env_file:
      - ./hadoop.env
    networks:
      - airflow_network

  mongo:
    image: mongo:5
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
      MONGO_INITDB_DATABASE: test
      MONGODB_DB: test
      MONGODB_USER: test
      MONGODB_PASSWORD: test
    ports:
      - 27017:27017
    volumes:
      - mongodb_data_container:/data/db
    networks:
      - airflow_network

  metabase:
    image: metabase/metabase
    ports:
      - 3000:3000
    networks:
      - airflow_network

  # my:
  #   build: ../internal
  #   depends_on:
  #     - spark-master
  #     - spark-worker1
  #     - spark-worker2
  #   hostname: test
  #   volumes: 
  #     - ./spark-warehouse:/spark-warehouse
  #   container_name: test
  #   networks:
  #     - airflow_network

  external:
    build: ../external
    depends_on:
      - spark-master
      - spark-worker1
      - spark-worker2
    hostname: external
    container_name: external
    networks:
      - airflow_network
  
volumes:
  hadoop_namenode:
  hadoop_datanode:
  hadoop_historyserver:
  mongodb_data_container: